@page "/terminal"
@using SjoaChallenge.TerminalComponents
@using SjoaChallenge.Utilities
@inherits ComponentBase
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject UsernameGenerator UsernameGenerator

<div id="terminal">
    <OutputComponent @ref="outputComponent" />
    <form @onsubmit=HandleInput>
        <InputComponent @ref="inputComponent" />
    </form>    
</div>

@code {
    private OutputComponent? outputComponent = new OutputComponent();
    private InputComponent? inputComponent = new InputComponent();

    protected override async Task OnInitializedAsync()
    {
        if(bool.TryParse((await SessionStorage.GetItemAsStringAsync("LoggedIn")), out var loggedIn))
        {
            if (loggedIn)
            {
                var username = (await SessionStorage.GetItemAsStringAsync("Username")) ?? string.Empty;
                if (string.IsNullOrEmpty(username))
                {
                    var usernames = await LocalStorage.GetItemAsync<ICollection<string>>("Usernames");
                    username = await GenerateUniqueUsername(usernames);

                    if (usernames == null)
                    {
                        usernames = new List<string>();

                    }
                    usernames.Add(username);
                    await LocalStorage.SetItemAsync<ICollection<string>>("Usernames", usernames);
                }
            }
            return;
        }

        NavigationManager.NavigateTo("");
    }

    private async Task<string> GenerateUniqueUsername(ICollection<string>? usernames)
    {
        var username = await UsernameGenerator.GenerateUsername();
        if (usernames?.Contains(username) ?? false)
            await GenerateUniqueUsername(usernames);
        
        return username;
    }

    private async Task HandleInput()
    {
        if (inputComponent == null || outputComponent == null) return;

        var input = inputComponent.GetInput();
        await outputComponent.ProcessCommand(input);
    }
}

