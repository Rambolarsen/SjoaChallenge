@using static SjoaChallenge.TerminalComponents.OutputLineComponent;
@using SjoaChallenge.Services
@inject IJSRuntime JS
@inject UserService UserService
@inject CommandService CommandService

<div id="output-container">
    @foreach (var outputLine in outputLines)
    {
        <OutputLineComponent Output="@outputLine" />
    }
</div>

@code {
    [Parameter] public string Username { get; set; } = string.Empty;
    [Parameter] public string Location { get; set; } = string.Empty;
    private ICollection<OutputLine> outputLines { get; set; } = new List<OutputLine>(){ new OutputLine("<h3>Test</h3>") };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CommandService.Initialization;
        }
    }

    public async Task<string> ProcessCommand(string input)
    {
        await JS.InvokeVoidAsync("scrollToBottom");

        if (string.Compare(input, "clear", true) == 0)
        {
            outputLines.Clear();
        }
        else
        {
            var outputLine = new OutputLine(input, Username, Location);
            outputLines.Add(outputLine);
            var commandOutput =  await CommandService.HandleCommand(input);

            if (!string.IsNullOrEmpty(commandOutput.directory)) 
            {
                Location = commandOutput.directory;
            }
            else if(!string.IsNullOrEmpty(commandOutput.html))
            {
                var commandOutputLine = new OutputLine(commandOutput.html);
                outputLines.Add(commandOutputLine);
            }            
        }

        StateHasChanged();

        return Location;
    }
}
